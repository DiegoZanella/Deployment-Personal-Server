name: Deploy Borg

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:admin

      - name: Install Borg and Borgmatic on polarbear
        run: |
          ssh -o StrictHostKeyChecking=no root@polarbear 'bash -s' <<'EOF'
            set -eux
      
            # Update and install both borgbackup and borgmatic from Ubuntu's repo
            apt-get update
            apt-get install -y borgbackup borgmatic

            mkdir -p /etc/borgmatic/
          EOF
          
      - name: Create Borg repository if not exists
        run: |
          ssh -o StrictHostKeyChecking=no diego@polarbear 'bash -s' <<EOF
            export BORG_REPO="${{ secrets.BORG_REPO_BASE }}/polarbear_backup"
            export BORG_PASSPHRASE="${{ secrets.BORG_REPO_PASSPHRASE }}"

            mkdir -p "\$BORG_REPO"
            if [ ! -f "\$BORG_REPO/config" ]; then
              borg init --encryption=repokey-blake2 "\$BORG_REPO"
            fi
          EOF

      - name: Ensure remote repo exists on bamboo
        run: |
          ssh -o StrictHostKeyChecking=no diego@bamboo 'mkdir -p /home/diego/borg_backups && chmod 700 /home/diego/borg_backups'
            
      - name: Generate borgmatic config from template
        run: |
          export VIKUNJA_DB_DIR="${{ secrets.VIKUNJA_DB_DIR }}"
          export VIKUNJA_FILES_DIR="${{ secrets.VIKUNJA_FILES_DIR }}"
          export NPM_DATA_DIR="${{ secrets.NPM_DATA_DIR }}"
          export NPM_CERTS_DIR="${{ secrets.NPM_CERTS_DIR }}"
          export MEMOS_DATA_DIR="${{ secrets.MEMOS_DATA_DIR }}"
          export BACKUP_REPO_LOC="${{ secrets.BORG_REPO_BASE }}/polarbear_backup"
      
          envsubst < borgmatic/config.template.yaml > borgmatic/config.yaml
          
      - name: Copy borgmatic config to server
        run: |
          scp -o StrictHostKeyChecking=no borgmatic/config.yaml root@polarbear:/etc/borgmatic/config.yaml

      - name: Validate borgmatic config and test job
        run: |
          ssh -o StrictHostKeyChecking=no root@polarbear 'bash -s' <<'EOF'
            export BORG_PASSPHRASE="${{ secrets.BORG_REPO_PASSPHRASE }}"
            borgmatic --config /etc/borgmatic/config.yaml --verbosity 1 --dry-run
          EOF
